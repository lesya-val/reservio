generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SYSTEM_ADMIN     @map("SYSTEM_ADMIN")
  RESTAURANT_ADMIN @map("RESTAURANT_ADMIN")
  EMPLOYEE         @map("EMPLOYEE")
}

enum BookingStatus {
  NEW       @map("Новая")
  CONFIRMED @map("Подтверждена")
  CANCELED  @map("Отменена")
}

enum PreBookingStatusEnum {
  PENDING  @map("Ожидает подтверждения")
  ACCEPTED @map("Подтверждена")
  REJECTED @map("Отклонена")
}

model Restaurant {
  id       Int     @id @default(autoincrement())
  name     String
  address  String
  phone    String
  email    String?
  isActive Boolean @default(true)

  users   User[] // Связь с сотрудниками
  adminId Int?   @unique // ID администратора (опционально, если админ еще не назначен)
  admin   User?  @relation("Admin", fields: [adminId], references: [id])

  bookings Booking[] // Связь с бронированиями

  halls Hall[] // Связь с залами ресторана

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  PreBooking PreBooking[]

  @@map("restaurants")
}

model Hall {
  id       Int    @id @default(autoincrement())
  name     String
  capacity Int

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  tables Table[] // Связь со столами в зале

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("halls")
}

model Table {
  id       Int @id @default(autoincrement())
  number   Int
  capacity Int
  x        Int
  y        Int
  width    Int
  height   Int

  hallId Int
  hall   Hall @relation(fields: [hallId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]

  @@map("tables")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  surname  String
  phone    String?
  email    String
  password String?
  role     Role

  restaurantId Int? // ID ресторана, к которому относится сотрудник
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  // Обратная связь для администратора
  managedRestaurant Restaurant? @relation("Admin")

  // Флаг для проверки, изменил ли пользователь временный пароль
  isTempPassword Boolean @default(true)

  bookings Booking[] // Связь с бронированиями, которые создал сотрудник

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Booking {
  id           Int        @id @default(autoincrement())
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  tableId Int?
  table   Table? @relation(fields: [tableId], references: [id], onDelete: Cascade)

  name        String
  phone       String
  email       String?
  status      BookingStatus?
  dateTime    DateTime
  guestsCount Int
  notes       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

model PreBooking {
  id Int @id @default(autoincrement())

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  name        String
  phone       String
  email       String?
  guestsCount Int
  dateTime    DateTime
  notes       String?
  status      PreBookingStatusEnum

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
